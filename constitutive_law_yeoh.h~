//LIC// ====================================================================
//LIC// This file forms part of oomph-lib, the object-oriented, 
//LIC// multi-physics finite-element library, available 
//LIC// at http://www.oomph-lib.org.
//LIC// 
//LIC//           Version 0.90. August 3, 2009.
//LIC// 
//LIC// Copyright (C) 2006-2009 Matthias Heil and Andrew Hazel
//LIC// 
//LIC// This library is free software; you can redistribute it and/or
//LIC// modify it under the terms of the GNU Lesser General Public
//LIC// License as published by the Free Software Foundation; either
//LIC// version 2.1 of the License, or (at your option) any later version.
//LIC// 
//LIC// This library is distributed in the hope that it will be useful,
//LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
//LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//LIC// Lesser General Public License for more details.
//LIC// 
//LIC// You should have received a copy of the GNU Lesser General Public
//LIC// License along with this library; if not, write to the Free Software
//LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
//LIC// 02110-1301  USA.
//LIC// 
//LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
//LIC// 
//LIC//====================================================================
//Header file for ConstitutiveLaw objects that will be used in all
//elasticity-type elements

#ifndef OOMPH_CONSTITUTIVE_LAW_YEOH_HEADER
#define OOMPH_CONSTITUTIVE_LAW_YEOH_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif

//OOMPH-LIB includes
#include "../../../src/generic/oomph_utilities.h"
#include "../../../src/generic/matrices.h"

namespace oomph
{

//=====================================================================
/// \short Yeoh strain-energy function.
/// with constitutive parameters C1, C2 and C3:
/// \f[
/// W = C_1 (I_0 - 3) + C_2 (I_0 - 3)^2 + C_3 (I_0 - 3)^3
/// \f]
/// where incompressibility (\f$ I_2 \equiv 1\f$) is assumed. 
//====================================================================
class Yeoh : public StrainEnergyFunction
{

  public:
 
 /// Constructor takes the pointer to the value of the constants
 Yeoh(double* c1_pt, double* c2_pt, double* c3_pt) : StrainEnergyFunction(),
    C1_pt(c1_pt), C2_pt(c2_pt), C3_pt(c3_pt) {}

 /// Empty Virtual destructor
 virtual ~Yeoh(){}

 /// Return the strain energy in terms of strain tensor
 double W(const DenseMatrix<double> &gamma)
  {return StrainEnergyFunction::W(gamma);}

 /// Return the strain energy in terms of the strain invariants
 double W(const Vector<double> &I)
 {return (*C1_pt)*(I[0]-3.0) + (*C2_pt)*(I[0]-3.0)*(I[0]-3.0) + (*C3_pt)*(I[0]-3.0)*(I[0]-3.0)*(I[0]-3.0) ;}

 
 /// \short Return the derivatives of the strain energy function with
 /// respect to the strain invariants
 void derivatives(Vector<double> &I, Vector<double> &dWdI)
  {
    dWdI[0] = 3*(*C3_pt) * I[0]*I[0] + 2*((*C2_pt) - 9 * (*C3_pt) + (*C1_pt) ) * I[0] + 27*(*C3_pt) - 6 * (*C2_pt);
   dWdI[1] = 0.0;
   dWdI[2] = 0.0;
  }

 /// \short Pure virtual function in which the user must declare if the
 /// constitutive equation requires an incompressible formulation
 /// in which the volume constraint is enforced explicitly.
 /// Used as a sanity check in PARANOID mode. True
 bool requires_incompressibility_constraint(){return true;}
 

  private:
 
 /// Pointer to first Yeoh constant
 double* C1_pt;

 /// Pointer to second Yeoh constant
 double* C2_pt;

 /// Pointer to third Yeoh constant
 double* C3_pt;

};






}

#endif
